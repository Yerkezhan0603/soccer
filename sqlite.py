import sqlite3
import psycopg2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SQLITE_FILE = r"C:\Users\Erasyl\Downloads\archive\database.sqlite"
PG_HOST = "localhost"
PG_DB = "data visualization"
PG_USER = "postgres"
PG_PASS = "0000"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
sqlite_conn = sqlite3.connect(SQLITE_FILE)
sqlite_cur = sqlite_conn.cursor()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
pg_conn = psycopg2.connect(
    host=PG_HOST,
    dbname=PG_DB,
    user=PG_USER,
    password=PG_PASS
)
pg_conn.autocommit = True  # –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç
pg_cur = pg_conn.cursor()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–∑ SQLite
sqlite_cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = sqlite_cur.fetchall()

for table_name_tuple in tables:
    table_name = table_name_tuple[0]
    print(f"\nüì¶ –ü–µ—Ä–µ–Ω–æ—Å —Ç–∞–±–ª–∏—Ü—ã: {table_name}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã –∏–∑ SQLite
    sqlite_cur.execute(f"PRAGMA table_info({table_name});")
    columns_info = sqlite_cur.fetchall()
    columns = [col[1] for col in columns_info]  # –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PostgreSQL (–µ—Å–ª–∏ –Ω–µ—Ç)
    col_defs = []
    for col in columns_info:
        col_name, col_type = col[1], col[2]

        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        if "INT" in col_type.upper():
            pg_type = "INTEGER"
        elif "CHAR" in col_type.upper() or "CLOB" in col_type.upper() or "TEXT" in col_type.upper():
            pg_type = "TEXT"
        elif "REAL" in col_type.upper() or "FLOA" in col_type.upper() or "DOUB" in col_type.upper():
            pg_type = "REAL"
        elif "DATE" in col_type.upper():
            pg_type = "TIMESTAMP"
        else:
            pg_type = "TEXT"

        col_defs.append(f"\"{col_name}\" {pg_type}")

    create_sql = f"CREATE TABLE IF NOT EXISTS \"{table_name}\" ({', '.join(col_defs)});"
    pg_cur.execute(create_sql)

    # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
    pg_cur.execute(f'TRUNCATE TABLE "{table_name}" RESTART IDENTITY CASCADE;')

    # –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
    sqlite_cur.execute(f"SELECT * FROM {table_name};")
    rows = sqlite_cur.fetchall()
    if rows:
        placeholders = ", ".join(["%s"] * len(columns))
        col_names = ", ".join([f'"{c}"' for c in columns])
        insert_sql = f'INSERT INTO "{table_name}" ({col_names}) VALUES ({placeholders})'

        for row in rows:
            try:
                pg_cur.execute(insert_sql, row)
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ {table_name}: {e}\n  –°—Ç—Ä–æ–∫–∞: {row}")
                pg_conn.rollback()  # —Å–±—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å

print("\n‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
sqlite_conn.close()
pg_cur.close()
pg_conn.close()
